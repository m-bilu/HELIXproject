#Combine cov and outcomes
data <- merge(exposome,phenotypeNA,by="ID")
#Combine cov and outcomes
data <- merge(exposome,phenotypeNA,by="ID")
#Combine cov and outcomes
data<-load("exposome_NA.RData")
getwd()
data2<-load("exposome_NA.RData")
df<-read.csv('/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/Final Project/full_dataset.csv')
df<-read.csv('/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/Final Project/exposome_NA.RData')
df<-load('/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/Final Project/exposome_NA.RData')
lifestyles_df<-codebook[codebook$domain=='Lifestyles',]
postnatal_lifestyle<-lifestyles_df[lifestyles_df$period=='Postnatal',]
pregnancy_lifestyle<-lifestyles_df[lifestyles_df$period=='Pregnancy',]
View(postnatal_lifestyle)
View(postnatal_lifestyle)
View(pregnancy_lifestyle)
View(pregnancy_lifestyle)
df_pregnancy_lifestyle<-pregnancy_lifestyle
View(df_pregnancy_lifestyle)
View(df_pregnancy_lifestyle)
View(phenotypeNA)
View(phenotypeNA)
install.packages('caret')
knitr::opts_chunk$set(echo = TRUE)
library(caTools)
library(car)
library(quantmod)
library(MASS)
library(corrplot)
library(mctest)
library(glmnet)
library(ggplot2)
library(GGally)
library(caret)
new_data<-read.csv('full_clean_data_v2.csv')
getwd()
setwd('/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/Final Project')
#load in data
data<-read.csv('train.csv')
View(data)
View(data)
data<-subset(data, select = -c(X) )
View(data)
View(data)
#load in data
data<-read.csv('train.csv')
data<-subset(data, select = -c(X,"ID") )
View(data)
View(data)
data<-subset(data, select = -c(X,ID) )
nan_count <-sapply(data, function(data) sum(length(which(is.na(data)))))
nan_count <- data.frame(nan_count)
nan_count
View(data)
View(data)
preg<-read.csv('preg_data.csv')
loc_preg<-names(preg)
loc_preg
loc_preg<-c(names(preg))
preg_data<-data[loc_preg]
View(preg_data)
View(preg_data)
train_val <- function(data) {
library(caret)
set.seed(331)
random_sample <- createDataPartition(data$hs_correct_raven, p = 0.8,
list = FALSE)
training_data  <- data[random_sample, ]
validation_data <- data[-random_sample, ]
list(train = training_data, validation = validation_data)
}
train_val(preg_data)
train_data<-train_val(preg_data)$train
train_val <- function(data) {
library(caret)
set.seed(331)
random_sample <- createDataPartition(data$hs_correct_raven, p = 0.8,
list = FALSE)
training_data  <- data[random_sample, ]
validation_data <- data[-random_sample, ]
list(train = training_data, validation = validation_data)
}
train_data<-train_val(preg_data)$train
validation_data<-train_val(preg_data)$validation
library(glmnet)
cv_model <- cv.glmnet(x, train_data$hs_correct_raven, alpha = 1)
#we use train_data to do feature selection
x<-data.matrix(train_data[,c("e3_alcpreg_yn_None" , "h_cereal_preg_Ter" ,
"h_dairy_preg_Ter" ,   "h_fastfood_preg_Ter",
"h_fish_preg_Ter" ,    "h_folic_t1_None"   ,
"h_fruit_preg_Ter"   , "h_legume_preg_Ter"  ,
"h_meat_preg_Ter" ,
"h_pamod_t3_None" ,    "h_pavig_t3_None"  ,
"h_veg_preg_Ter")])
cv_model <- cv.glmnet(x, train_data$hs_correct_raven, alpha = 1)
best_lambda <- cv_model$lambda.min
best_lambda
#we use train_data to do feature selection
set.seed(331)
x<-data.matrix(train_data[,c("e3_alcpreg_yn_None" , "h_cereal_preg_Ter" ,
"h_dairy_preg_Ter" ,   "h_fastfood_preg_Ter",
"h_fish_preg_Ter" ,    "h_folic_t1_None"   ,
"h_fruit_preg_Ter"   , "h_legume_preg_Ter"  ,
"h_meat_preg_Ter" ,
"h_pamod_t3_None" ,    "h_pavig_t3_None"  ,
"h_veg_preg_Ter")])
cv_model <- cv.glmnet(x, train_data$hs_correct_raven, alpha = 1)
best_lambda <- cv_model$lambda.min
best_lambda
#The lambda value that minimizes the test MSE turns out to be 0.04498289
plot(cv_model)
best_model <- glmnet(x, train_data$hs_correct_raven, alpha = 1, lambda = best_lambda)
coef(best_model)
excluding_var<-c()
for (i in test_cov_ind){
excluding_var <- c(excluding_var, names(train_data[i]))
}
test_cov_ind<-which(coef(best_model)==0)
excluding_var<-c()
for (i in test_cov_ind){
excluding_var <- c(excluding_var, names(train_data[i]))
}
print("cov that we may exclude")
print(excluding_var)
write.csv(train_val(data)$train,'/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/
Final Project/aania_train.csv',
row.names = FALSE)
write.csv(train_val(data)$train,'/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/
Final Project\\aania_train.csv',
row.names = FALSE)
write.csv(train_val(data)$validation,'/Users/kazirahman/Library/CloudStorage/OneDrive-UniversityofWaterloo/3A/Stat331/
Final Project\\aania_val.csv',
row.names = FALSE)
